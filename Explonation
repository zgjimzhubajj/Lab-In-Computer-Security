//Lab 1: Task 1
    // Define file paths (Update these paths as per your environment)
    String keystorePath = "lab1Store";
    String encryptedFilePath = "ciphertext.enc";
    String signaturePath1 = "ciphertext.enc.sig1";
    String signaturePath2 = "ciphertext.enc.sig2";
    String certificatePath = "lab1Sign.cert";
    String macFilePath1 = "ciphertext.mac1.txt";
    String macFilePath2 = "ciphertext.mac2.txt";
What is the purpose: The purpose is to define file paths for various files that are used in the program.

// Load the keystore
    KeyStore keyStore = KeyStore.getInstance("JKS");
    try (FileInputStream keystoreFis = new FileInputStream(keystorePath)) {
        keyStore.load(keystoreFis, "lab1StorePass".toCharArray());
    }
What is the purpose: The purpose is to Initialize and load the Java KeyStore (JKS)
 to manage cryptographic keys and certificates.

 PrivateKey privateKey = (PrivateKey) keyStore.getKey("lab1EncKeys", "lab1KeyPass".toCharArray());
 What is the purpose: Retrieves the private key from the keystore for decrypting sensitive information.

// Read the encrypted file content
    byte[] encryptedFileContent = Files.readAllBytes(Paths.get(encryptedFilePath));
What is the purpose: Reads the content of the encrypted file into a byte array for further processing.

// Assuming each part is 128 bytes
    byte[] rsaEncryptedKey = Arrays.copyOfRange(encryptedFileContent, 0, 128);
    byte[] rsaEncryptedIV = Arrays.copyOfRange(encryptedFileContent, 128, 256);
    byte[] rsaEncryptedHmacKey = Arrays.copyOfRange(encryptedFileContent, 256, 384);
    byte[] aesEncryptedData = Arrays.copyOfRange(encryptedFileContent, 384, encryptedFileContent.length);
What is the purpose: Divides the encrypted file content into distinct parts:
                     rsaEncryptedKey: RSA-encrypted key
                     rsaEncryptedIV: RSA-encrypted initialization vector (IV)
                     rsaEncryptedHmacKey: RSA-encrypted HMAC key
                     aesEncryptedData: AES-encrypted data

//Lab 1: Task 2
    // RSA decryption
    Cipher rsaCipher = Cipher.getInstance("RSA");
    rsaCipher.init(Cipher.DECRYPT_MODE, privateKey);
    byte[] key1 = rsaCipher.doFinal(rsaEncryptedKey);
    byte[] iv = rsaCipher.doFinal(rsaEncryptedIV);
    byte[] key2 = rsaCipher.doFinal(rsaEncryptedHmacKey);
What is the purpose: Initiates RSA decryption to obtain:
                     key1: Key for AES decryption
                     iv: Initialization vector for AES decryption
                     key2: Key for HMAC verification


//AES (Advanced Encryption Standard) is a symmetric encryption algorithm widely used to secure sensitive data.
It was established as the standard encryption algorithm by the
 U.S. National Institute of Standards and Technology (NIST) in 2001,
 replacing the aging DES (Data Encryption Standard). AES is a symmetric key algorithm,
  meaning the same key is used for both encryption and decryption.
// AES decryption
    Cipher aesCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
    aesCipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key1, "AES"), new IvParameterSpec(iv));
    byte[] plaintext = aesCipher.doFinal(aesEncryptedData);
What is the purpose: Uses AES decryption to obtain the plaintext message using key1 and iv.

//Lab 2: Task 3
    // Read HMACs from files
    // Read MAC strings and convert them to byte arrays
    String mac1String = new String(Files.readAllBytes(Paths.get(macFilePath1)));
    String mac2String = new String(Files.readAllBytes(Paths.get(macFilePath2)));
    byte[] hmac1 = hexStringToByteArray(mac1String);
    byte[] hmac2 = hexStringToByteArray(mac2String);
What is the purpose: Reads HMACs from files, converts them from string to byte arrays for verification.

// Verify HMAC
    boolean hmacVerified1 = verifyHmac(plaintext, key2, hmac1);
    boolean hmacVerified2 = verifyHmac(plaintext, key2, hmac2);
What is the purpose: Calls the verifyHmac method to check the integrity of the plaintext using HMAC.

//-------
private static boolean verifyHmac(byte[] data, byte[] key, byte[] expectedHmac) throws Exception {
    Mac mac = Mac.getInstance("HmacMD5");
    mac.init(new SecretKeySpec(key, "HmacMD5"));
    byte[] computedHmac = mac.doFinal(data);
    return Arrays.equals(computedHmac, expectedHmac);
}
Verifies HMAC (Hash-based Message Authentication Code) using the HmacMD5 algorithm.
Takes the data, key, and expected HMAC as parameters.
Returns true if the computed HMAC matches the expected HMAC, false otherwise.

//HMAC stands for "Hash-based Message Authentication Code.
" It is a specific type of message authentication code (MAC) involving a cryptographic hash function and a secret cryptographic key.
 HMACs are widely used for verifying the integrity and authenticity of a message.

 //RSA, named after its inventors Ron Rivest, Adi Shamir, and Leonard Adleman,
  is a widely used asymmetric cryptographic algorithm that plays a crucial role in securing digital communication and data.
   Asymmetric cryptography involves the use of a pair of keys:
    a public key for encryption and a private key for decryption.
    RSA is particularly known for its applications in securing communication channels,
     digital signatures, and key exchange.

//
HMAC 1 verification: false
  This means that the verification of HMAC 1 (hmac1) is not successful.
  The computed HMAC (presumably based on the decrypted plaintext, key2, and hmac1) does not match the expected HMAC (hmac1).

HMAC 2 verification: true
  This indicates that the verification of HMAC 2 (hmac2) is successful.
  The computed HMAC (presumably based on the decrypted plaintext, key2, and hmac2) matches the expected HMAC (hmac2).

Signature 1 verification: true
  The verification of Signature 1 (signature1) is successful.
  The digital signature is valid for the decrypted plaintext and the associated public key.

Signature 2 verification: false
  The verification of Signature 2 (signature2) is not successful.
  The digital signature does not match the decrypted plaintext and the associated public key.


The reasons for these outcomes could be various and might involve issues such as:
  Key Mismatch:
  The keys used for HMAC and digital signature verification (key2 and the public key)
  might not be consistent or might not match the keys used during encryption and signing.

Data Corruption:
  The data used for HMAC and digital signature verification might be corrupted or modified,
  leading to verification failures.

Algorithm or Padding Issues:
  There could be issues with the choice of algorithms, padding schemes,
  or other cryptographic parameters that affect the verification process.

---------------------------------------------------------------------------------------------

1. Why is it not a good idea to simply encrypt the plaintext with the receiver’s public key? Why
bother to generate Key1, IV, and encrypt them?

1. Encrypting the plaintext directly with the receiver's public key is not a good idea because
it lacks confidentiality. Anyone with access to the public key could decrypt the message.
The purpose of generating a symmetric key (Key1) and an Initialization Vector (IV)
is to use symmetric-key encryption for the actual data.
Symmetric-key encryption is faster and more efficient for encrypting large amounts of data,
while public-key encryption is typically used for exchanging the symmetric key securely.
This hybrid approach combines the efficiency of symmetric-key encryption with the secure key exchange
provided by public-key encryption.

2. Suppose the receiver (i.e. you) does not share any secret with the sender before she/he
   receives the encrypted keys in ciphertext.enc (i.e. the ciphertext + the encrypted symmetric
   keys). Does a verified correct message authentication code (MAC) (e.g. the one received by
   applying HmacMD5 in this exercise) authenticate the sender or can we trust the origin of the
   message in this case? Why or why not? (Note that we are assuming that digital signature is
   not used)

2. No, a verified correct Message Authentication Code (MAC)
alone does not authenticate the sender or establish trust in the origin of the message.
A MAC ensures data integrity and that the message has not been tampered with during transit,
but it does not provide sender authentication. Without a shared secret or a digital signature,
an attacker could generate a valid MAC for a modified message,
leading to potential unauthorized access or manipulation of the data.
Sender authentication requires additional mechanisms such as public-key cryptography
or a shared secret to verify the identity of the sender.



Class Cipher
• getInstance(”Algorithm name”)
– Creates the cipher
• init(opMode,key)
– opMode determines if encryption or
decryption
• update()
– Inputs data
• doFinal()
– Input final part of data
– Generate final output
– Make cipher ready for new input

Must pad if the data is not multiple of block size
How can the receiver know what is padded
• Must use predefined protocol
• Example PKCS5/PKCS7 padding
– Write the number of byte to pad, repeat until
block size
